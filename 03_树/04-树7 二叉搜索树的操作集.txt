Position Find(BinTree BST, ElementType X){
    if (!BST){
        return NULL;
    }
    else {
        if (X > BST->Data){
            return Find(BST->Right, X);
        }
        else if (X < BST->Data){
            return Find(BST->Left, X);
        }
        else {
            return BST;
        }
    }
}

BinTree Insert(BinTree BST, ElementType X){
    if (!BST){
        BST = (BinTree)malloc(sizeof(struct TNode));
        BST->Data = X;
        BST->Left = BST->Right = NULL;
        return BST;
    }
    else {
        if (X < BST->Data){
            BST->Left = Insert(BST->Left, X);
        }
        else if (X > BST->Data){
            BST->Right = Insert(BST->Right, X);
        }
        else {
        }
        return BST;
    }
}

Position FindMin(BinTree BST){
    if (!BST){
        return NULL;
    }
    else {
        while (BST->Left){
            BST = BST->Left;
        }
        return BST;
    }
}

Position FindMax(BinTree BST){
    if (!BST){
        return NULL;
    }
    else {
        while (BST->Right){
            BST = BST->Right;
        }
        return BST;
    }
}

BinTree Delete(BinTree BST, ElementType X){
    Position tmp;
    
    if (!BST){
        printf("Not Found\n");
    }
    else {
        if (X < BST->Data){
            BST->Left = Delete(BST->Left, X);
        }
        else if (X > BST->Data){
            BST->Right = Delete(BST->Right, X);
        }
        else {
            if (BST->Left && BST->Right){
                tmp = FindMin(BST->Right);
                BST->Data = tmp->Data;
                BST->Right = Delete(BST->Right, BST->Data);
            }
            else {
                tmp = BST;
                if (BST->Left){
                    BST = BST->Left;
                }
                else if (BST->Right){
                    BST = BST->Right;
                }
                else {
                    BST = NULL;
                }
                free(tmp);
            }
        }
    }
    return BST;
}